#!/usr/bin/env bash

# This script serves as the NumPy and SciPy build step of the
# [**Python Buildpack**](https://github.com/heroku/heroku-buildpack-python)
# compiler.
#
# A [buildpack](http://devcenter.heroku.com/articles/buildpacks) is an
# adapter between a Python application and Heroku's runtime.
#
# This script is invoked by [`bin/compile`](/).

source $BIN_DIR/utils

VENDORED_GIT_PREFIX="https://raw.githubusercontent.com/thenovices/npscipy-binaries/master"
PY_PKGS="python/lib/python2.7/site-packages"

function install_binaries {
  # Install binary dependences: BLAS, LAPACK, ATLAS, and Fortran
  if [ -d "vendor/lib/atlas-base" ]; then
    puts-step "Using cached binaries."
  else
    puts-step "Downloading BLAS/LAPACK/ATLAS/Fortran binaries."
    # Download and extract everything into target vendor directory.
    curl -O "${VENDORED_GIT_PREFIX}/npscipy.tar.gz"
    tar -xzf npscipy.tar.gz &> /dev/null
    rm -f npscipy.tar.gz
  fi
  set-env BLAS $(pwd)/vendor/lib/atlas-base/atlas/libblas.a
  set-env LAPACK $(pwd)/vendor/lib/atlas-base/atlas/liblapack.a
  set-env ATLAS $(pwd)/vendor/lib/atlas-base/libatlas.a
  set-env LIBRARY_PATH $LIBRARY_PATH:$(pwd)/vendor/lib/atlas-base:$(pwd)/vendor/lib/atlas-base/atlas
  set-env LD_LIBRARY_PATH $LD_LIBRARY_PATH:$(pwd)/vendor/lib/atlas-base:$(pwd)/vendor/lib/atlas-base/atlas
}

function install_prebuilt {
  local pkg=$1
  declare -a versions=("${!2}")
  local install_version=""

  # First ensure that the package is specified
  if ! $(pip-grep --silent $REQ_TXT $pkg); then
    return
  fi

  # Now determine the version used.
  # If no version is specified, the default version is used (last version in the array passed).
  if [[ $(pip-grep --silent --print-req $REQ_TXT $pkg) == "$pkg" ]]; then
    install_version=${versions[${#versions[@]} - 1]}
    puts-step "No version specified for $pkg. Using $install_version."
  else
    for version in "${versions[@]}"; do
      if [[ $(pip-grep --silent --print-req $REQ_TXT $pkg) == "${pkg}==${version}" ]]; then
        install_version=$version
      fi
    done
  fi

  if [[ -z $install_version ]]; then
    puts-step "Could not install specified version. This buildpack only supports ${pkg} versions ${versions[@]}."
    return
  fi

  # Handle any existing installations:
  # (1) Skip installation if the correct version is already installed.
  # (2) If an existing installation of a different version exists, remove it.
  if [[ -d "$PY_PKGS/$pkg" ]]; then
    local existing_version=$(find $PY_PKGS -name "${pkg}-*" | cut -d'-' -f3)
    if [[ $existing_version == $install_version ]]; then
      puts-step "Existing $pkg ($existing_version) package detected."
      return
    else
      puts-step "Removing old installation of $pkg ($existing_version)."
      rm -rf "$PY_PKGS/${pkg}"*
    fi
  fi

  # Install the package, by downloading and unzipping the prebuilt package.
  local name="${pkg}-${install_version}"
  puts-step "Downloading prebuilt $pkg ($install_version)"
  curl -O "${VENDORED_GIT_PREFIX}/${name}.tar.gz" &> /dev/null
  puts-step "Installing $pkg ($install_version)"
  tar -xzf "${name}.tar.gz"
  cp -a venv/* python/
  rm -rf venv "${name}.tar.gz"
}

# Work around for XICA internal reason
# REQ_TXT=$(pwd)/requirements.txt
REQ_TXT=$(pwd)/pypi_requirements.txt
NUMPY_VERSIONS=(1.6.2 1.7.2 1.8.1 1.8.2 1.9.0)
SCIPY_VERSIONS=(0.13.3 0.14.0)

if (pip-grep --silent $REQ_TXT numpy scipy &> /dev/null); then
  puts-step "Detected numpy/scipy in requirements.txt."
  cd .heroku

  install_binaries

  install_prebuilt "numpy" NUMPY_VERSIONS[@]
  install_prebuilt "scipy" SCIPY_VERSIONS[@]

  cd ..
fi
